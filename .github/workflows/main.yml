name: Build LSPosed Module APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual builds

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        accept-android-sdk-licenses: true
        
    - name: Create Project Structure
      run: |
        # Clean and create directory structure
        rm -rf .gradle/ build/ app/build/ gradle/ gradlew gradlew.bat
        rm -f build.gradle settings.gradle gradle.properties local.properties app/build.gradle
        rm -rf app/src/main/res/layout/
        rm -rf app/src/main/java/
        
        mkdir -p app/src/main/java/com/example/xposedmodule
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/assets
        mkdir -p gradle/wrapper
        
    - name: Create Gradle Files
      run: |
        # Create gradle.properties
        cat > gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        EOF
        
        # Create settings.gradle
        cat > settings.gradle << 'EOF'
        rootProject.name = "XposedModule"
        include ':app'
        EOF
        
        # Create root build.gradle
        cat > build.gradle << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:7.4.2'
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url 'https://api.xposed.info/' }
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        # Create app/build.gradle
        cat > app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'
        
        android {
            compileSdk 33
            
            defaultConfig {
                applicationId "com.example.xposedmodule"
                minSdk 21
                targetSdk 33
                versionCode 1
                versionName "1.0"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                }
                debug {
                    minifyEnabled false
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
            }
            
            lintOptions {
                abortOnError false
                checkReleaseBuilds false
            }
        }
        
        dependencies {
            compileOnly 'de.robv.android.xposed:api:82'
        }
        EOF
        
    - name: Create Android Files
      run: |
        # Create AndroidManifest.xml
        cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.example.xposedmodule">
            
            <application
                android:allowBackup="true"
                android:label="Xposed Module"
                android:supportsRtl="true">
                
                <meta-data
                    android:name="xposedmodule"
                    android:value="true" />
                <meta-data
                    android:name="xposeddescription"
                    android:value="LSPosed Module" />
                <meta-data
                    android:name="xposedminversion"
                    android:value="82" />
            </application>
        </manifest>
        EOF
        
        # Create Main hook class
        cat > app/src/main/java/com/example/xposedmodule/Main.java << 'EOF'
        package com.example.xposedmodule;
        
        import de.robv.android.xposed.IXposedHookLoadPackage;
        import de.robv.android.xposed.XposedBridge;
        import de.robv.android.xposed.callbacks.XC_LoadPackage;
        
        public class Main implements IXposedHookLoadPackage {
            @Override
            public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
                XposedBridge.log("XposedModule: Loaded in " + lpparam.packageName);
            }
        }
        EOF
        
        # Create xposed_init file
        echo "com.example.xposedmodule.Main" > app/src/main/assets/xposed_init
        
        # Create strings.xml
        cat > app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">Xposed Module</string>
        </resources>
        EOF
        
        # Create themes.xml
        cat > app/src/main/res/values/themes.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="android:Theme">
                <item name="android:label">@string/app_name</item>
            </style>
        </resources>
        EOF
        
        # Create colors.xml
        cat > app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="white">#FFFFFF</color>
            <color name="black">#000000</color>
        </resources>
        EOF
        
        # Create simple layout (no complex dependencies)
        mkdir -p app/src/main/res/layout
        cat > app/src/main/res/layout/activity_main.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            android:padding="16dp">
            
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/app_name"
                android:textSize="18sp" />
                
        </LinearLayout>
        EOF
        
    - name: Setup Gradle Wrapper
      run: |
        # Create gradle-wrapper.properties
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Download gradle-wrapper.jar
        wget -q -O gradle/wrapper/gradle-wrapper.jar \
          https://github.com/gradle/gradle/raw/v7.5.0/gradle/wrapper/gradle-wrapper.jar
        
        # Create gradlew script
        cat > gradlew << 'EOF'
        #!/usr/bin/env sh
        
        ##############################################################################
        ##
        ##  Gradle start up script for UN*X
        ##
        ##############################################################################
        
        # Attempt to set APP_HOME
        # Resolve links: $0 may be a link
        PRG="$0"
        # Need this for relative symlinks.
        while [ -h "$PRG" ] ; do
            ls=`ls -ld "$PRG"`
            link=`expr "$ls" : '.*-> \(.*\)$'`
            if expr "$link" : '/.*' > /dev/null; then
                PRG="$link"
            else
                PRG=`dirname "$PRG"`"/$link"
            fi
        done
        SAVED="`pwd`"
        cd "`dirname \"$PRG\"`/" >/dev/null
        APP_HOME="`pwd -P`"
        cd "$SAVED" >/dev/null
        
        APP_NAME="Gradle"
        APP_BASE_NAME=`basename "$0"`
        
        # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        
        # Use the maximum available, or set MAX_FD != -1 to use that value.
        MAX_FD="maximum"
        
        warn () {
            echo "$*"
        }
        
        die () {
            echo
            echo "$*"
            echo
            exit 1
        }
        
        # OS specific support (must be 'true' or 'false').
        cygwin=false
        msys=false
        darwin=false
        nonstop=false
        case "`uname`" in
          CYGWIN* )
            cygwin=true
            ;;
          Darwin* )
            darwin=true
            ;;
          MSYS* | MINGW* )
            msys=true
            ;;
          NONSTOP* )
            nonstop=true
            ;;
        esac
        
        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
        
        # Determine the Java command to use to start the JVM.
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                # IBM's JDK on AIX uses strange locations for the executables
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
        
        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
            fi
        else
            JAVACMD="java"
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
        
        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
        fi
        
        # Increase the maximum file descriptors if we can.
        if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
            MAX_FD_LIMIT=`ulimit -H -n`
            if [ $? -eq 0 ] ; then
                if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                    MAX_FD="$MAX_FD_LIMIT"
                fi
                ulimit -n $MAX_FD
                if [ $? -ne 0 ] ; then
                    warn "Could not set maximum file descriptor limit: $MAX_FD"
                fi
            else
                warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
            fi
        fi
        
        # For Darwin, add options to specify how the application appears in the dock
        if $darwin; then
            GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
        fi
        
        # For Cygwin or MSYS, switch paths to Windows format before running java
        if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
            APP_HOME=`cygpath --path --mixed "$APP_HOME"`
            CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
        
            JAVACMD=`cygpath --unix "$JAVACMD"`
        
            # We build the pattern for arguments to be converted via cygpath
            ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
            SEP=""
            for dir in $ROOTDIRSRAW ; do
                ROOTDIRS="$ROOTDIRS$SEP$dir"
                SEP="|"
            done
            OURCYGPATTERN="(^($ROOTDIRS))"
            # Add a user-defined pattern to the cygpath arguments
            if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
            fi
            # Now convert the arguments - kludge to limit ourselves to /bin/sh
            i=0
            for arg in "$@" ; do
                CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
        
                if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                    eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                else
                    eval `echo args$i`="\"$arg\""
                fi
                i=`expr $i + 1`
            done
            case $i in
                0) set -- ;;
                1) set -- "$args0" ;;
                2) set -- "$args0" "$args1" ;;
                3) set -- "$args0" "$args1" "$args2" ;;
                4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
            esac
        fi
        
        # Escape application args
        save () {
            for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
            echo " "
        }
        APP_ARGS=`save "$@"`
        
        # Collect all arguments for the java command, following the shell quoting and substitution rules
        eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
        
        exec "$JAVACMD" "$@"
        EOF
        
        # Make gradlew executable
        chmod +x gradlew
        
    - name: Build Debug APK
      run: |
        echo "=== Starting build ==="
        ./gradlew clean assembleDebug --stacktrace
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: lsposed-module-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        if-no-files-found: error
        
    - name: Build Success Summary
      if: success()
      run: |
        echo "### 🎉 LSPosed Module Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status**: Build Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          echo "📦 **Debug APK**: $(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Installation Instructions" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the APK from artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Install on your Android device" >> $GITHUB_STEP_SUMMARY
        echo "3. Enable in LSPosed Manager" >> $GITHUB_STEP_SUMMARY
        echo "4. Select target apps and reboot" >> $GITHUB_STEP_SUMMARY
